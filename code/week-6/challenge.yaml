Resources:

  # Este recurso crea un Grupo de Seguridad para la instancia EC2
  MyEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for EC2 instances WordPress.
      VpcId: vpc-0e07703dec4c5175f
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0c4f7023847b90238
      InstanceType: t2.micro
      SubnetId: subnet-0db4dc65e3b43a624
      SecurityGroupIds:
        - !Ref MyEC2SecurityGroup
      # Script de usuario que se va a ejecutar en la instancia cuando se inicie
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt update
          apt install git -y
          apt -y install \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt update
          apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
          docker run -d -p 80:80 wordpress:4.9.5
      BlockDeviceMappings:                    # Add this section to define the EBS volume
        - DeviceName: /dev/xvdf               # Specify the device name to attach the EBS volume (example: /dev/xvdf)
          Ebs:
            VolumeSize: 10                     # Specify the size of the EBS volume in GB
            VolumeType: gp2                    # Specify the EBS volume type (example: gp2 for General Purpose SSD)
 
  # DatabaseInstance:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     DBName: "blog"
  #     Engine: MySQL
  #     MasterUsername: bloguser
  #     MasterUserPassword: password123
  #     DBInstanceClass: db.t2.micro
  #     AllocatedStorage: '5'
  #     DBSecurityGroups:
  #       - !Ref DatabaseSG
  # DatabaseSG:
  #   Type: AWS::RDS::DBSecurityGroup
  #   Properties:
  #     GroupDescription: Security Group for RDS public access
  #     DBSecurityGroupIngress:
  #       - CIDRIP: 0.0.0.0/0
  


  # MyLoadBalancer:
  #   Type: "AWS::ElasticLoadBalancing::LoadBalancer"
  #   Properties:
  #     Listeners:
  #       - LoadBalancerPort: 80
  #         InstancePort: 80
  #         Protocol: HTTP
  #     AvailabilityZones:
  #       - !Ref "AWS::Region"
  #     HealthCheck:
  #       Target: "HTTP:80/"
  #       HealthyThreshold: "3"
  #       UnhealthyThreshold: "5"
  #       Interval: "30"
  #       Timeout: "5"
  #     Instances:
  #       - !Ref MyEC2Instance
  # MyAutoScalingGroup:
  #   Type: "AWS::AutoScaling::AutoScalingGroup"
  #   Properties:
  #     LaunchConfigurationName: !Ref MyLaunchConfiguration
  #     MinSize: 2
  #     MaxSize: 5
  #     DesiredCapacity: 2
  #     AvailabilityZones:
  #       - "us-east-1a"
  #     LoadBalancerNames:
  #       - !Ref MyLoadBalancer
  # MyLaunchConfiguration:
  #   Type: "AWS::AutoScaling::LaunchConfiguration"
  #   Properties:
  #     ImageId: "ami-06ca3ca175f37dd66"  # Replace with your desired EC2 AMI ID
  #     InstanceType: "t2.micro"  # Replace with your desired instance type
  #     SecurityGroups:
  #       - !Ref MyEC2SecurityGroup
  #     # KeyName: "my-key-pair"  # Replace with your key pair name
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         yum update -y
  #         yum install -y httpd
  #         echo 'Bootcamp AWS Ignite 2023 Apache!' > /var/www/html/index.html
  #         systemctl start httpd
  #         systemctl enable httpd


